# Copyright (C) 2012 Johan Hake
#
# This file is part of GOSS.
#
# GOSS is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GOSS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with GOSS. If not, see <http://www.gnu.org/licenses/>.

__all__ = ["jit"]

# System imports
import sys
import os
import re
import numpy
import instant
import hashlib
import types

# Import Gotran
import gotran
from gotran.common import check_arg, push_log_level, pop_log_level, info, INFO
from gotran.codegeneration.oderepresentation import ODERepresentation
from gotran.codegeneration.codegenerator import CodeGenerator
from gotran.model.ode import ODE

# Local imports
from codegeneration import GossCodeGenerator, _codegeneration_doc_str
import cpp

# Create doc string to jit
_jit_doc_str = "\n".join(["","JIT compile a Gotran ODE "] + \
                         _codegeneration_doc_str.split("\n")[2:])
# Set log level of instant
instant.set_log_level("WARNING")

_additional_declarations = r"""
%init%{{
import_array();
%}}

%include <exception.i>
%feature("autodoc", "1");
%include <std_string.i>
%include <goss/swig/typemaps.i>
%include <goss/swig/exceptions.i>

%include <boost_shared_ptr.i>

%shared_ptr(goss::ODE)
%shared_ptr(goss::ParameterizedODE)
%shared_ptr(goss::{ModelName})

// GOSS Import statements
%import(module="goss.cpp") "goss/ODE.h"
%import(module="goss.cpp") "goss/ParameterizedODE.h"

// Modifications of the wrapped C++ class
%ignore goss::{ModelName}::get_ic;
%extend goss::{ModelName}{{
%pythoncode%{{
{python_code}
%}}
}}"""

def jit(ode, cppargs=None, **options):

    # Code generators
    cgen = GossCodeGenerator(ode, **options)

    oderepr = cgen.oderepr
    pgen = CodeGenerator(oderepr)

    # Create unique module name for this application run
    module_name = "goss_compiled_module_{0}_{1}".format(\
        oderepr.ode.name, hashlib.sha1(repr(oderepr.signature()) + \
                                       instant.get_swig_version() + \
                                       instant.__version__ + \
                                       gotran.__version__ + \
                                       str(cppargs)).hexdigest())
    
    # Check cache
    compiled_module = instant.import_module(module_name)

    if compiled_module:
        return getattr(compiled_module, cgen.name)()

    push_log_level(INFO)

    # Init state code
    python_code = pgen.init_states_code()
    cpp_code = cgen.generate_class_code()

    info("Calling GOSS just-in-time (JIT) compiler, this may take some "\
         "time...")
    sys.stdout.flush()

    # Configure instant and add additional system headers
    instant_kwargs = configure_instant()

    instant_kwargs["cppargs"] = cppargs or instant_kwargs["cppargs"]
    instant_kwargs["cmake_packages"] = ["GOSS"] 

    declaration_form = dict(\
        ModelName = cgen.name, 
        python_code = python_code,
        )

    # Compile extension module with instant
    compiled_module = instant.build_module(\
        code = cpp_code,
        additional_declarations = _additional_declarations.format(\
            **declaration_form),
        signature = module_name,
        **instant_kwargs)

    info(" done")
    pop_log_level()
    sys.stdout.flush()

    # Return an instantiated class
    return getattr(compiled_module, cgen.name)()

# Assign docstring
jit.func_doc = _jit_doc_str

def configure_instant():
    """
    Check system requirements

    Returns a dict with kwargs that can be passed to instant.build_module.
    """
    instant_kwargs = {}
    swig_include_dirs = []

    # Let swig see the installed gillstep swig files
    swig_include_dirs = []
    goss_include_found = False
    #for inc_dir in instant_kwargs['include_dirs']:
    #    # Check if goss is installed in inc_dir
    #    if os.path.exists(os.path.join(inc_dir, "goss", "swig", "goss.i")):
    #        goss_include_found = True
    #        if inc_dir not in swig_include_dirs:
    #            swig_include_dirs.append(inc_dir)

    #if not goss_include_found:
    #    raise OSError("""Didn't find goss.i in include paths returned from pkg-config.
#Please make sure that your GOSS installation corresponds with the one returned by pkg-config""")

    # Check that the form compiler will use the same swig version
    # that PyGOSS was compiled with
    if not instant.check_swig_version(cpp.__swigversion__, same=True):
        raise OSError, """GOSS was not compiled with the present version of swig.
Install swig version {0} or recompiled GOSS with present swig
""".format(cpp.__swigversion__)

    #instant_kwargs['swig_include_dirs'] = swig_include_dirs
    #instant_kwargs['include_dirs'] += [numpy.get_include()]
    instant_kwargs['system_headers'] = ["boost/shared_ptr.hpp",
                                        "boost/make_shared.hpp",
                                        "cmath",
                                        "stdexcept",
                                        "numpy/arrayobject.h",
                                        "goss/ParameterizedODE.h",
                                        "goss/Timer.h",
                                        ]
    instant_kwargs['swigargs'] =['-O -c++']
    instant_kwargs['cppargs'] = ['-O2']

    return instant_kwargs
