#!/usr/bin/env python
__author__ = "Johan Hake (hake.dev@gmail.com)"
__date__ = "2012-09-20 -- 2013-11-19"
__copyright__ = "Copyright (C) 2012 " + __author__
__license__  = "GNU LGPL Version 3.0 or later"

import os

from gotran.codegeneration.oderepresentation import ODERepresentation, \
     _default_params
from gotran.model import load_ode

from goss.codegeneration import GossCodeGenerator, _codegeneration_doc_str

def main(filename, params):
    """
    Create a c header file from a gotran model
    """

    # Load Gotran model
    ode = load_ode(filename)

    # Check for completness
    if not ode.is_complete:
        return 

    # Create an ODE representation
    oderepr = ODERepresentation(ode, **params.copy(True))

    # Code generators
    cgen = GossCodeGenerator(oderepr)

    output = params.output

    if output:
        if not(len(output)>2 and output[-2:] == ".h"):
            output += ".h"
    else:
        output = filename.replace(".ode", "")+".h"

    f = open(output, "w")
    f.write("#include <goss.h>\n\n")
    f.write(cgen.generate_class_code())

if __name__ == "__main__":
    import sys
    from modelparameters.parameterdict import ParameterDict, OptionParam, Param
    
    params = _default_params(["parameter_numerals",
                              "use_parameter_names"])
    params = ParameterDict(\
        output = Param("", description="Specify output file name"),\
        **params)
    params.parse_args(usage="usage: %prog FILE [options]")#sys.argv[2:])
    
    if len(sys.argv) < 2:
        raise RuntimeError("Expected a single gotran file argument")

    if not os.path.isfile(sys.argv[1]):
        raise IOError("Expected the argument to be a file")
	 
    file_name = sys.argv[1]
    main(file_name, params)
